// Generated by CoffeeScript 1.10.0
(function() {
  var collect, exec, getDefaultNetwork, getDefaultNetworkByInet4, getDefaultNetworkByInet6, net;

  net = require('net');

  exec = require('child_process').exec;

  getDefaultNetwork = function(command, callback) {
    return exec(command, function(error, stdout, stderr) {
      var data, defaultGateway, defaultInterface, family, i, len, line, ref, ref1;
      if (error != null) {
        return callback(error);
      }
      if (stderr.trim() !== '') {
        return callback(new Error(stderr.trim()));
      }
      if (stdout.trim() === '') {
        return callback(null, new Object);
      }
      data = {};
      stdout = stdout.trim();
      ref = stdout.split('\n');
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        ref1 = line.split(' '), defaultGateway = ref1[0], defaultInterface = ref1[1];
        if ((defaultGateway == null) || (defaultInterface == null)) {
          return callback(new Error("parse error: " + stdout));
        }
        if (!net.isIP(defaultGateway)) {
          return callback(new Error("parse error: " + stdout));
        }
        data[defaultInterface] || (data[defaultInterface] = []);
        family = (function() {
          switch (net.isIP(defaultGateway)) {
            case 4:
              return 'IPv4';
            case 6:
              return 'IPv6';
          }
        })();
        if (family == null) {
          return callback(new Error("invalid address: " + stdout));
        }
        data[defaultInterface].push({
          family: family,
          address: defaultGateway
        });
      }
      return callback(null, data);
    });
  };

  getDefaultNetworkByInet4 = function(callback) {
    return getDefaultNetwork("netstat -rn -A inet | awk '$4~/UG/ {print $2,$8;}'", function(error, data) {
      return callback(error, data);
    });
  };

  getDefaultNetworkByInet6 = function(callback) {
    return getDefaultNetwork("netstat -rn -A inet6 | awk '$4~/UG/ {print $2,$7;}'", function(error, data) {
      return callback(error, data);
    });
  };

  collect = function(callback) {
    return getDefaultNetworkByInet4(function(error4, data4) {
      return getDefaultNetworkByInet6(function(error6, data6) {
        var adapters, data, i, iface, len, ref, ref1, result;
        result = {};
        ref = [data4, data6];
        for (i = 0, len = ref.length; i < len; i++) {
          data = ref[i];
          for (iface in data) {
            adapters = data[iface];
            result[iface] || (result[iface] = []);
            (ref1 = result[iface]).push.apply(ref1, adapters);
          }
        }
        return callback(null, result);
      });
    });
  };

  module.exports = {
    collect: collect
  };

}).call(this);
